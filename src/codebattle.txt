import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // game loop
        while (true) {
            int x = in.nextInt();
            int y = in.nextInt();
            int nextCheckpointX = in.nextInt(); // x position of the next check point
            int nextCheckpointY = in.nextInt(); // y position of the next check point
            int nextCheckpointDist = in.nextInt(); // distance to the next checkpoint
            int nextCheckpointAngle = in.nextInt(); // angle between your pod orientation and the direction of the next checkpoint
            int opponentX = in.nextInt();
            int opponentY = in.nextInt();
            int thrust = 100;
            Boolean flag = false;

            /** tester : 
            * pour gérer les virages à 180 ou si on a un boost de suite ca peut nous faire sortir de la tangeante vers le prochai :  
            * mettre un compteur de quand je voudrais actualiser 
            *
            */

            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");
            if (nextCheckpointAngle > 90 || nextCheckpointAngle < -90)
            {
                thrust = 5;
                flag = false;
            }
            else
            {
                thrust = 100;
                if (nextCheckpointDist > 7000 && (nextCheckpointAngle < 10 || nextCheckpointAngle > -10))
                {
                    flag = true;
                }
                else
                {
                    flag = false;
                }
                
            }

            // You have to output the target position
            // followed by the power (0 <= thrust <= 100)
            // i.e.: "x y thrust"
            if (flag)
            {
                System.out.println(nextCheckpointX + " " + nextCheckpointY + " " + "BOOST");     
            }
            else
            {
                System.out.println(nextCheckpointX + " " + nextCheckpointY + " " + thrust);
            }
            
        }
    }
}